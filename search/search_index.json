{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home In a microservice architecture, each subsystem can be in its own repository. Furthermore, each individual repository would also have documentation under /docs that makes it easier to keep documentation updated as code changes within each repo. Multi-Repo Docs is a new process that collects docs from multiple repos and publishes all them on a single website. This example explains how we can achieve the goal using git submodules and Trigger Travis CI builds . Suppose there are three repos named repo-docs-1 , repo-docs-2 , and repo-docs-3 . In addition, suppose there is one root repo named root-docs that has the website related files and common documents such as contribution guidelines, developer workflow, contacts and meetings information, etc. The idea is to trigger a job in root-docs repo to build and push the website files whenever there is a change (i.e. a merge commit) in any of doc repos (i.e. repo-docs-1, repo-docs-2, repo-docs-3). The job in root-docs is responsible to add a submodule of each doc repo and build the website using MkDocs static site generator. Pros Distributed docs and a centeralized representation : The above solution provides a central repo for common documents and website related files and allows to keep each subsystem related docs in its own repo simultaneously. Easy to maintain : whenever there is a new repo is added to the project, we just need to update the script that travis job runs to include its docs folder in the build process of the website. Cons Content Duplication : the above solution still needs to bring a copy of the docs from other repos into the root repo (i.e. using git submodule) to build the website using most up to date docs.","title":"Home"},{"location":"#home","text":"In a microservice architecture, each subsystem can be in its own repository. Furthermore, each individual repository would also have documentation under /docs that makes it easier to keep documentation updated as code changes within each repo. Multi-Repo Docs is a new process that collects docs from multiple repos and publishes all them on a single website. This example explains how we can achieve the goal using git submodules and Trigger Travis CI builds . Suppose there are three repos named repo-docs-1 , repo-docs-2 , and repo-docs-3 . In addition, suppose there is one root repo named root-docs that has the website related files and common documents such as contribution guidelines, developer workflow, contacts and meetings information, etc. The idea is to trigger a job in root-docs repo to build and push the website files whenever there is a change (i.e. a merge commit) in any of doc repos (i.e. repo-docs-1, repo-docs-2, repo-docs-3). The job in root-docs is responsible to add a submodule of each doc repo and build the website using MkDocs static site generator.","title":"Home"},{"location":"#pros","text":"Distributed docs and a centeralized representation : The above solution provides a central repo for common documents and website related files and allows to keep each subsystem related docs in its own repo simultaneously. Easy to maintain : whenever there is a new repo is added to the project, we just need to update the script that travis job runs to include its docs folder in the build process of the website.","title":"Pros"},{"location":"#cons","text":"Content Duplication : the above solution still needs to bring a copy of the docs from other repos into the root repo (i.e. using git submodule) to build the website using most up to date docs.","title":"Cons"},{"location":"developers/community-info/","text":"Contacts and Meetings","title":"Contacts and Meetings"},{"location":"developers/community-info/#contacts-and-meetings","text":"","title":"Contacts and Meetings"},{"location":"developers/contributing/","text":"Contribution Guidelines","title":"Contribution Guidelines"},{"location":"developers/contributing/#contribution-guidelines","text":"","title":"Contribution Guidelines"},{"location":"developers/dev_workflow/","text":"Developer Workflow","title":"Developer Workflow"},{"location":"developers/dev_workflow/#developer-workflow","text":"","title":"Developer Workflow"},{"location":"repo-docs-1/docs/page1/","text":"page1 Page1 from repo-docs-1 is updated","title":"page1"},{"location":"repo-docs-1/docs/page1/#page1","text":"Page1 from repo-docs-1 is updated","title":"page1"},{"location":"repo-docs-1/docs/page2/","text":"page2 Page2 from repo-docs-1","title":"page2"},{"location":"repo-docs-1/docs/page2/#page2","text":"Page2 from repo-docs-1","title":"page2"},{"location":"repo-docs-2/docs/page1/","text":"page1 Page 1 from repo-docs-2","title":"page1"},{"location":"repo-docs-2/docs/page1/#page1","text":"Page 1 from repo-docs-2","title":"page1"},{"location":"repo-docs-2/docs/page2/","text":"Page2 Page 2 from repo-docs-2","title":"Page2"},{"location":"repo-docs-2/docs/page2/#page2","text":"Page 2 from repo-docs-2","title":"Page2"},{"location":"repo-docs-3/docs/page1/","text":"page1","title":"page1"},{"location":"repo-docs-3/docs/page1/#page1","text":"","title":"page1"}]}